name: Build RViz on all platforms

on: push

jobs:
  run_rviz_compilation:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Dependencies
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: .github/ci_env.yml
    - name: Install System Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libglew-dev mesa-utils xvfb libgl1-mesa-glx libgl1-mesa-dev libglu1-mesa libglu1-mesa-dev \
                             libselinux1 libxdamage1 libxfixes3 libxxf86vm1

    - name: Build RViz on Unix
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash -l -eo pipefail {0}
      run: |
        if [[ `uname -s` == "Linux" ]]; then
          CDT="-cos6-x86_64"
          micromamba install -y mesa-libgl-devel$CDT mesa-dri-drivers$CDT \
                                libselinux$CDT libxdamage$CDT libxxf86vm$CDT \
                                libxext$CDT libxfixes$CDT -c conda-forge
        fi

        export CTEST_OUTPUT_ON_FAILURE=1

        mkdir build
        cd build

        cmake .. -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
                 -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
                 -DCMAKE_BUILD_TYPE=Release \
                 -DCATKIN_SKIP_TESTING=OFF \
                 -G "Ninja"

        ninja
        ninja run_tests

    - name: Build RViz on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        micromamba shell hook -s cmd.exe -p C:\Users\runneradmin\micromamba
        Get-Content -Path C:\Users\runneradmin\micromamba\condabin\mamba_hook.bat

    - name: Build RViz on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |

        echo "Remove unnecessary / colliding things from PATH"

        set "PATH=%PATH:C:\ProgramData\Chocolatey\bin;=%"
        set "PATH=%PATH:C:\Program Files (x86)\sbt\bin;=%"
        set "PATH=%PATH:C:\Rust\.cargo\bin;=%"
        set "PATH=%PATH:C:\Program Files\Git\usr\bin;=%"
        set "PATH=%PATH:C:\Program Files\Git\cmd;=%"
        set "PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%"
        set "PATH=%PATH:C:\Program Files (x86)\Subversion\bin;=%"
        set "PATH=%PATH:C:\Program Files\CMake\bin;=%"
        set "PATH=%PATH:C:\Program Files\OpenSSL\bin;=%"
        set "PATH=%PATH:C:\Strawberry\c\bin;=%"
        set "PATH=%PATH:C:\Strawberry\perl\bin;=%"
        set "PATH=%PATH:C:\Strawberry\perl\site\bin;=%"
        set "PATH=%PATH:c:\tools\php;=%"
        :: Make paths like C:\\hostedtoolcache\\windows\\Ruby\\2.5.7\\x64\\bin garbage
        set "PATH=%PATH:ostedtoolcache=%"

        echo "Activate environment, and compile"

        call C:\Users\runneradmin\micromamba\condabin\micromamba.bat activate test

        SET "PYTHONPATH=%CONDA_PREFIX%\Library\lib\site-packages"

        mkdir build
        cd build
        SET "CTEST_OUTPUT_ON_FAILURE=1"

        cmake .. -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library" ^
                 -DCMAKE_INSTALL_PREFIX="%CONDA_PREFIX%\Library" ^
                 -DCMAKE_BUILD_TYPE=Release ^
                 -DCATKIN_SKIP_TESTING=OFF ^
                 -DBoost_USE_STATIC_LIBS=OFF ^
                 -G "Ninja"

        ninja
        ninja run_tests
